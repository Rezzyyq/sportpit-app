import dotenv from "dotenv";
dotenv.config();
import mongoose from "mongoose";

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("‚úÖ MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è seedShipmentsAuto"))
  .catch(err => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:", err));

// –°—Ö–µ–º–∞ –ø—Ä–æ–¥—É–∫—Ç—É
const ProductSchema = new mongoose.Schema({
  name: String,
  quantity: Number
});
const Product = mongoose.model("Product", ProductSchema);

// –°—Ö–µ–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
const ShipmentSchema = new mongoose.Schema({
  product: { type: mongoose.Schema.Types.ObjectId, ref: "Product" },
  quantity: Number,
  date: Date
});
const Shipment = mongoose.model("Shipment", ShipmentSchema);

async function seedShipmentsAuto() {
  try {
    // –û—á–∏—â–∞—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é shipments
    await Shipment.deleteMany({});
    console.log("üóë –ö–æ–ª–µ–∫—Ü—ñ—è shipments –æ—á–∏—â–µ–Ω–∞");

    // –ë–µ—Ä–µ–º–æ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
    const products = await Product.find({});
    if (!products.length) {
      console.log("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∫–æ–ª–µ–∫—Ü—ñ—ó products");
      return;
    }

    for (let product of products) {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (1-5)
      const quantity = Math.floor(Math.random() * 5) + 1;
      const date = new Date(); // —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –¥–∞—Ç–∞

      await Shipment.create({
        product: product._id,
        quantity,
        date
      });

      console.log(`‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–ª—è ${product.name} –¥–æ–¥–∞–Ω–∞ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity})`);
    }

  } catch (err) {
    console.error(err);
  } finally {
    mongoose.connection.close();
  }
}

seedShipmentsAuto();
